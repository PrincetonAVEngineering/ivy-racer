import numpy as np
import torch
import matplotlib.pyplot as plt
import cv2 
from PIL import Image

import sys
sys.path.append("..")
from segment_anything import sam_model_registry, SamPredictor

# Function to show the mask
def show_mask(mask, ax, random_color=False):
    if random_color:
        color = np.concatenate([np.random.random(3), np.array([0.6])], axis=0)
    else:
        color = np.array([30/255, 144/255, 255/255, 0.6])
    h, w = mask.shape[-2:]
    mask_image = mask.reshape(h, w, 1) * color.reshape(1, 1, -1)
    ax.imshow(mask_image)
    
# Function to show the points
def show_points(coords, labels, ax, marker_size=375):
    pos_points = coords[labels==1]
    neg_points = coords[labels==0]
    ax.scatter(pos_points[:, 0], pos_points[:, 1], color='green', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)
    ax.scatter(neg_points[:, 0], neg_points[:, 1], color='red', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)   
    
# Load the image
image = cv2.imread('Images/road3.jpg')
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Device configuration for running sam 
sam_checkpoint = "sam_vit_h_4b8939.pth"
model_type = "vit_h"
device = "mps"

# Model setup
sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)
sam.to(device=device)

# Setup predictor
predictor = SamPredictor(sam)
predictor.set_image(image)

# Feed in prompt point
input_point = np.array([[1000, 3000]])  # Sample coordinates
input_label = np.array([1])  # Class label

# Show the point on the image
plt.figure(figsize=(10,10))
plt.imshow(image)
show_points(input_point, input_label, plt.gca())
plt.axis('on')
plt.show()  

# Get the masks, scores, and logits from the model
masks, scores, logits = predictor.predict(
    point_coords=input_point,
    point_labels=input_label,
    multimask_output=True,
)

print(f"Masks shape: {masks.shape}")  # Checking the shape of the masks

# Masks should be (num_masks, H, W) shape
# Let's save each mask

for i, (mask, score) in enumerate(zip(masks, scores)):
    plt.figure(figsize=(10,10))
    plt.imshow(image)
    show_mask(mask, plt.gca())
    show_points(input_point, input_label, plt.gca())
    plt.title(f"Mask {i+1}, Score: {score:.3f}", fontsize=18)
    plt.axis('off')
    plt.show()  

    # Ensure mask is either boolean or float (scale it to 0-255 if necessary)
    if mask.dtype != np.uint8:
        mask = (mask > 0.5).astype(np.uint8) * 255  # Convert to binary mask (0 or 255)

    # Check the shape of the mask (should be (H, W))
    print(f"Mask shape before saving: {mask.shape}")

    # Convert the mask to an image and save it
    mask_image = Image.fromarray(mask)  # Convert the numpy array to a PIL Image object
    mask_image.save(f'segmentation_mask_{i+1}.png')  # Save the mask as PNG
    print(f"Segmentation mask {i+1} saved as 'segmentation_mask_{i+1}.png'.")
